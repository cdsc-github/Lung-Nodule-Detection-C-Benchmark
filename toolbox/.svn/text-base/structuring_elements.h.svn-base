/**
 * structuring_elements.h: this file is part of the ALNSB project.
 *
 * ALNSB: the Adaptive Lung Nodule Screening Benchmark
 *
 * Copyright (C) 2014,2015 University of California Los Angeles
 *
 * This program can be redistributed and/or modified under the terms
 * of the license specified in the LICENSE.txt file at the root of the
 * project.
 *
 * Contact: Alex Bui <buia@mii.ucla.edu>
 *
 */
/**
 * Written by: Shiwen Shen, Prashant Rawat, Louis-Noel Pouchet and William Hsu
 *
 */

#ifndef ALNSB_TOOLBOX_STRUCTURING_ELEMENTS_H
# define ALNSB_TOOLBOX_STRUCTURING_ELEMENTS_H





// 2D structuring elements.

static const  int SE_2D_5x5[5][5] =  {{0,     0,     1,     0,     0},
			    {0,     1,     1,     1,     0},
			    {1,     1,     1,     1,     1},
			    {0,     1,     1,     1,     0},
			    {0,     0,     1,     0,     0}};



static const  int SE_2D_29x29[29][29]={{0,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1, 1,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     0,     0},
       {0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1, 1,     1,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     0},
       {0,     0,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0},
       {0,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,   1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0},
       {0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     0,     0},
       {0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     0},
       {0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0},
       {0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,         1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,         1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,          1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
	1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,          1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,         1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1},
       {0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,         1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0},
       {0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0},
       {0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     0},
       {0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1, 1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     0,     0},
       {0,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,         1,     1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0},
       {0,     0,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,         1,     1,     1,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0},
       {0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,     1,         1,     1,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     0},
       {0,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1,    1,     1,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     0,     0}};



// SE table
struct strucElts
{
  int* se;
  unsigned int halo;
};

// Int identifier for the SE 5x5 in the SE table.
#define SE_2D_diamond_2		0
// Int identifier for the SE 29x29 in the SE table.
#define SE_2D_diamond_5		1


static const struct strucElts structuringElements[] =
  { {(int*)SE_2D_5x5, 2},
    {(int*)SE_2D_29x29, 14}
  };



#endif // !ALNSB_TOOLBOX_STRUCTURING_ELEMENTS_H
